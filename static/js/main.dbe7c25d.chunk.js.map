{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleButtonClick","setState","prevState","count","addToHome","deferredPrompt","prompt","userChoice","then","choiceResult","outcome","console","log","state","showAddToHomeScreen","_this2","window","addEventListener","e","preventDefault","react_default","a","createElement","className","onClick","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNA6DeA,qBAzDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBRQ,kBAAoB,WAClBP,EAAKQ,SAAS,SAACC,GACb,MAAO,CACLC,MAAOD,EAAUC,MAAQ,MA1BZV,EA+BnBW,UAAY,WACVX,EAAKY,eAAeC,SAEpBb,EAAKY,eAAeE,WACjBC,KAAK,SAACC,GACwB,aAAzBA,EAAaC,QACfC,QAAQC,IAAI,iCAEZD,QAAQC,IAAI,kCAEdnB,EAAKY,eAAiB,QAtC1BZ,EAAKoB,MAAQ,CACXV,MAAO,EACPW,qBAAqB,GALNrB,mFASC,IAAAsB,EAAAnB,KAClBoB,OAAOC,iBAAiB,sBAAuB,SAACC,GAC9CP,QAAQC,IAAI,6BAEZM,EAAEC,iBAEFJ,EAAKV,eAAiBa,EAEtBH,EAAKd,SAAS,CACZa,qBAAqB,uCA4BzB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS5B,KAAKI,mBAAoBJ,KAAKiB,MAAMV,OACpDP,KAAKiB,MAAMC,qBACVM,EAAAC,EAAAC,cAAA,UAAQE,QAAS5B,KAAKQ,WAAtB,8BAnDQqB,cCSZC,EAAcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxB,KAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1B,QACfqB,UAAUC,cAAcO,YAI1B/B,QAAQC,IACN,iHAKEqB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB1B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACLnC,QAAQmC,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBrC,OAAOY,SAAS0B,MACpDC,SAAWvC,OAAOY,SAAS2B,OAIvC,OAGFvC,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMe,EAAK,GAAAwB,OAAMH,GAAN,sBAEP3B,GAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,GACHxB,KAAK,SAAAkD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMxD,KAAK,SAAA6B,GACjCA,EAAa4B,aAAazD,KAAK,WAC7BQ,OAAOY,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1BY,MAAM,WACLlC,QAAQC,IACN,mEArFAuD,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMxD,KAAK,WACjCG,QAAQC,IACN,gHAMJmB,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.dbe7c25d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n      showAddToHomeScreen: false,\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeinstallprompt', (e) => {\n      console.log('before install was called');\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      this.deferredPrompt = e;\n      // Update UI notify the user they can add to home screen\n      this.setState({\n        showAddToHomeScreen: true\n      });\n    });\n  }\n\n  handleButtonClick = () => {\n    this.setState((prevState) => {\n      return {\n        count: prevState.count + 1\n      }\n    });\n  };\n\n  addToHome = () => {\n    this.deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    this.deferredPrompt.userChoice\n      .then((choiceResult) => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the A2HS prompt');\n        } else {\n          console.log('User dismissed the A2HS prompt');\n        }\n        this.deferredPrompt = null;\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleButtonClick}>{this.state.count}</button>\n        {this.state.showAddToHomeScreen &&\n          <button onClick={this.addToHome}>Add to home screen</button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}